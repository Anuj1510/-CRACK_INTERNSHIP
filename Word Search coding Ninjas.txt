Q -->) You are given an array of strings “arr” and a character matrix “mat”. 
Your task is to find out all the possible words in the array “arr” that can be constructed by moving sequentially in 
the matrix “mat”, where the movement can start from any position in the matrix “mat” and can be done in all 8 possible 
directions. However, the same cell can not be considered more than once for the construction of a word. 
Print the words in sorted manner.

For Example:
If arr = {“go”, “pp”, “no”, “op”}, mat = {{‘g’,’p’}, 
                                          {‘d’,’o’}}.
Here, the two-letter words that can be formed from the matrix “mat” are
 “gp”, “gd”, “go”, “pg”, “pd”, “po”, “dg”, “dp”, “do”, “og”, “op”, “od”.

So, the words that are present in the array “arr” which can be formed from the matrix “mat” are “go” and “op”.

sol. -->

#include<bits/stdc++.h>

bool dfs(vector<vector<char>> &board,vector<vector<int>> &visited,string &word,int i,int j,int idx){

	if(idx == word.size()){
		return true;
	} 

        if(i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || visited[i][j] == 1 || board[i][j] != word[idx]){
            return false;
        }

        visited[i][j] = 1;

        bool ls = dfs(board,visited,word,i,j-1,idx+1); 
        bool rs = dfs(board,visited,word,i,j+1,idx+1); 
        bool ds = dfs(board,visited,word,i+1,j,idx+1);
        bool us = dfs(board,visited,word,i-1,j,idx+1);
		bool lc = dfs(board,visited,word,i-1,j-1,idx+1);
		bool rc = dfs(board,visited,word,i-1,j+1,idx+1);
		bool dc = dfs(board,visited,word,i+1,j-1,idx+1);
		bool uc = dfs(board,visited,word,i+1,j+1,idx+1);
        visited[i][j] = 0;

        return ls | rs | ds | us | lc | rc | dc | uc;


}

vector<string> findPossibleWords(vector<string> arr, vector<vector<char>> mat){
	int n = mat.size();
    int m = mat[0].size();
	vector<string> ans;
	for(int i = 0;i<arr.size();i++){
		string s = arr[i];
		vector<vector<int>> visited(n,vector<int>(m,0));
		bool flag = false;
		for(int j = 0;j<n;j++){
			if(flag){
				break;
			}
			for(int k = 0;k<m;k++){
				if(visited[j][k] == 0 && s[0] == mat[j][k]){
					if(dfs(mat,visited,s,j,k,0)){
						ans.push_back(s);
						flag = true;
					}
				}
				if(flag){
					break;
				}
			}
			
		}
	}
	sort(ans.begin(),ans.end());
	return ans;
}
